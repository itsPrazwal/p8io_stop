openapi: 3.0.0
info:
  title: P8IO API
  version: 1.0.0

paths:
  /ping:
    get:
      summary: Ping check
      responses:
        '200':
          description: Pong response

  /api/auth/signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '400':
          description: Email already exists

  /api/auth/login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /api/auth/forget-password:
    get:
      summary: Send password reset token
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Reset token sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '404':
          description: Email not found

  /api/auth/reset-password:
    post:
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, newPassword]
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token
        '404':
          description: User not found

  /api/auth/me:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

  /api/auth/change-password:
    post:
      summary: Change password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed
        '401':
          description: Invalid current password

  /api/auth/update:
    put:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '404':
          description: User not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserInput:
      type: object
      required:
        - type
        - isCompany
        - email
        - phone
        - password
      properties:
        type:
          type: string
          enum: [USER, PROVIDER]
          description: User category
        isCompany:
          type: boolean
          description: Whether the user is a company
        email:
          type: string
          format: email
        phone:
          type: string
          minLength: 5
        password:
          type: string
          minLength: 6
        firstName:
          type: string
          nullable: true
          description: Required for individuals, or company representative's first name
        lastName:
          type: string
          nullable: true
          description: Required for individuals, or company representative's last name
        companyName:
          type: string
          nullable: true
          description: Required if isCompany=true
        taxNumber:
          type: string
          nullable: true
          pattern: '^[A-Z0-9]{10}$'
          description: Required if isCompany=true; must be 10 uppercase letters or digits
        address:
          type: object
          nullable: true
          properties:
            streetNumber:
              type: string
              minLength: 1
            streetName:
              type: string
              minLength: 1
            city:
              type: string
              minLength: 1
            state:
              type: string
              minLength: 1
            postcode:
              type: string
              minLength: 1
          required:
            - streetNumber
            - streetName
            - city
            - state
            - postcode
          description: Required if isCompany=false

    User:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [USER, PROVIDER]
        isCompany:
          type: boolean
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        companyName:
          type: string
          nullable: true
        taxNumber:
          type: string
          nullable: true
          description: 10 uppercase letters or digits
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time

    Address:
      type: object
      properties:
        streetNumber:
          type: string
        streetName:
          type: string
        city:
          type: string
        state:
          type: string
        postcode:
          type: string

    UserBasic:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
